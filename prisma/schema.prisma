// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
      provider = "prisma-client-js"
}

datasource db {
      provider = "postgresql"
      url      = env("DATABASE_URL")
}

model User {
      id       String @id
      username String @unique

      avatar      String?
      cover       String?
      name        String?
      surname     String?
      description String?
      city        String?
      school      String?
      work        String?

      posts   Post[] // The users posts will be here // each user can have multiple posts
      likes   Like[] // The users likes will be here // each user can have multiple likes
      comment Comment[] // The users comment will be here // each user can have multiple comments

      followers  Follower[] @relation("UserFollower") // each user can have multiple followers
      followings Follower[] @relation("UserFollowings") // each user can follow multiple people

      followRequestSent     FollowRequest[] @relation("FollowRequestSent")
      followRequestReceived FollowRequest[] @relation("FollowRequestReceived")

      Blocked   Block[] @relation("BlocksSent")
      BlockedBy Block[] @relation("BlocksReceived")

      storeies Stories[]

      createdAt DateTime @default(now())
}

model Post {
      id Int @id @default(autoincrement())

      desc   String?
      img String?
      userId String

      user User @relation(fields: [userId], references: [id], onDelete: Cascade) // [ onDelete: Cascade ] if the user is deleted delete the users posts also

      likes   Like[]
      comment Comment[]

      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt
}

model Comment {
      id Int @id @default(autoincrement())

      desc   String
      userId String
      postId Int

      user User @relation(fields: [userId], references: [id], onDelete: Cascade) // [ onDelete: Cascade ] if the user is deleted delete the users posts also
      post Post @relation(fields: [postId], references: [id], onDelete: Cascade) // [ onDelete: Cascade ] if the user is deleted delete the users posts also

      likes Like[]

      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt
}

model Like {
      id Int @id @default(autoincrement())

      userId    String
      postId    Int?
      commentId Int?

      user    User     @relation(fields: [userId], references: [id], onDelete: Cascade) // [ onDelete: Cascade ] if the user is deleted delete the users Likes also
      post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade) // [ onDelete: Cascade ] if the user is deleted delete the users Likes also
      Comment Comment? @relation(fields: [commentId], references: [id])

      createdAt DateTime @default(now())
}

model Follower {
      id Int @id @default(autoincrement())

      followerId  String
      followingId String

      follower  User @relation("UserFollower", fields: [followingId], references: [id], onDelete: Cascade) // [ onDelete: Cascade ] if the user is deleted delete the users Likes also
      following User @relation("UserFollowings", fields: [followerId], references: [id], onDelete: Cascade) // [ onDelete: Cascade ] if the user is deleted delete who the user is following also

      createdAt DateTime @default(now())
}

model FollowRequest {
      id Int @id @default(autoincrement())

      senderId   String
      receiverId String

      sender   User @relation("FollowRequestSent", fields: [senderId], references: [id], onDelete: Cascade) // [ onDelete: Cascade ] if the user is deleted delete who the user is following also
      receiver User @relation("FollowRequestReceived", fields: [receiverId], references: [id], onDelete: Cascade) // [ onDelete: Cascade ] if the user is deleted delete the users Likes also

      createdAt DateTime @default(now())

      @@unique([senderId, receiverId]) // because we cant send a follow request to another person twice 
}

model Block {
      id Int @id @default(autoincrement())

      blockerId String
      blockedId String

      blocker User @relation("BlocksSent", fields: [blockerId], references: [id], onDelete: Cascade) // [ onDelete: Cascade ] if the user is deleted delete who the user is following also
      blocked User @relation("BlocksReceived", fields: [blockedId], references: [id], onDelete: Cascade) // [ onDelete: Cascade ] if the user is deleted delete the users Likes also

      createdAt DateTime @default(now())

      @@unique([blockerId, blockedId]) // because we cant send a follow request to another person twice 
}

model Stories {
      id Int @id @default(autoincrement())

      userId String @unique

      img String

      user User @relation(fields: [userId], references: [id], onDelete: Cascade) // [ onDelete: Cascade ] if the user is deleted delete the users Likes also

      createdAt DateTime @default(now())
      expiresAt DateTime
}
